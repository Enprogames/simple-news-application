-- This file contains all of the queries used in the application. The actual queries that are used exist in src/queries.py

-- Ensure that all database tables exist
SELECT COUNT(*) FROM UserRoles WHERE roleName = 'None'
UNION ALL
SELECT COUNT(*) FROM Users WHERE userID = 0
UNION ALL
SELECT COUNT(*) FROM articles WHERE articleID = 0
UNION ALL
SELECT COUNT(*) FROM Comments WHERE commentID = 0
UNION ALL
SELECT COUNT(*) FROM Categories WHERE catName = 'None'
UNION ALL
SELECT COUNT(*) FROM Tags WHERE tagID = 0
UNION ALL
SELECT COUNT(*) FROM ArticleTags WHERE articleID = 0
UNION ALL
SELECT COUNT(*) FROM ArticleViews WHERE articleID = 0;

-- Used for getting the most recent comment for when we create a new one.
-- I used this instead of a trigger due to time constraints.
SELECT MAX(commentID) FROM Comments;

-- Create new article
INSERT INTO ArticleViews (articleID, userID, viewedAt)
              values (:articleID, :userID, CURRENT_TIMESTAMP);

-- create new comment
INSERT INTO Comments (commentID, articleID, userID, commentDate, content)
                 values (:commentID, :articleID, cast(:userID as integer), SYSDATE, :content);

-- create new user
INSERT INTO users (username, password, registerDate)
                 VALUES (:username, :password, :registerDate);

-- delete user
DELETE FROM users WHERE userID = cast(:userID as integer);

-- See how many users have a given ID. Used for checking if a user exists.
SELECT COUNT(*) FROM users WHERE userID = cast(:userID as integer);

-- Get details for a user
SELECT userID, username, password, registerDate, roleName
FROM users
WHERE userID = cast(:userID as integer);

-- Get the ID of the user with a given username and password. Used for verifying login.
SELECT COUNT(*), userID
FROM users
WHERE username = :username AND password = :password
GROUP BY userID;

-- Retrieve a given article
SELECT articleID, title, author, publishDate, to_char(content)
FROM articles WHERE articleID = cast(:articleID as integer);

-- Retrieve a given tag
SELECT tagID, tagName, catName
FROM Tags WHERE tagID = cast(:tagID as integer);

-- See how many tags have a given ID. Used for checking if a tag exists.
SELECT COUNT(*) FROM Tags WHERE tagID = cast(:tagID as integer);

-- Retrieve a given category
SELECT catName, description FROM Categories WHERE lower(catName) = lower(:catName);

-- See how many categories have a given name. Used for checking if a category exists.
SELECT COUNT(*) FROM Categories WHERE lower(catName) = lower(:catName);


-- Get all tags for a given article
SELECT T.tagName
FROM tags T join articleTags AT on T.tagID = AT.tagID
            join articles A on AT.articleID = A.articleID
WHERE A.articleID = cast(:articleID as integer)
GROUP BY T.tagName;

-- Get all comments for a given article
SELECT C.commentID, C.articleID, C.userID, C.commentDate, to_char(C.content), U.username
FROM Comments C join Users U on C.userID = U.userID
WHERE C.articleID = cast(:articleID as integer);

-- Get all articles, sorted by some column
SELECT articleID, title, author, publishDate, content
FROM articles
ORDER BY :sort_by ASC;

-- Get all articles in a given category
SELECT A.articleID, A.title, A.author, A.publishDate, to_char(A.content)
FROM articles A join ArticleTags AT on A.articleID = AT.articleID
                join Tags T on AT.tagID = T.tagID
WHERE T.catName = :catName
GROUP BY A.articleID, A.title, A.author, A.publishDate, to_char(A.content)
ORDER BY :sort_by ASC;

-- Get all articles that have a given tag
SELECT A.articleID, A.title, A.author, A.publishDate, to_char(A.content)
FROM articles A join ArticleTags AT on A.articleID = AT.articleID
WHERE AT.tagID = cast(:tagID as integer)
GROUP BY A.articleID, A.title, A.author, A.publishDate, to_char(A.content)
ORDER BY :sort_by ASC;


-- ######### ADMIN REPORTS #########

-- Show how many views and comments each article has for a given year.
SELECT R."ID", R."Title", R."Views", R."Comments"
FROM
(SELECT 'ID' as "ID", 'Title' as "Title", 'Views' as "Views", 'Comments' as "Comments"
FROM dual
UNION ALL
SELECT to_char(A.articleID), to_char(A.title), to_char(NVL(V.viewcount, 0)), to_char(NVL(C.commentcount, 0))
FROM articles A
   left join (SELECT articleID, count(*) as viewcount
            FROM ArticleViews
            WHERE extract(year from viewedAt) = :year
            GROUP BY articleID) V on A.articleID = V.articleID
   left join (SELECT articleID, count(*) as commentcount
            FROM Comments
            WHERE extract(year from commentDate) = :year
            GROUP BY articleID) C on A.articleID = C.articleID
WHERE extract(year from A.publishDate) = :year) R
ORDER BY R."Views" DESC;

-- Show how many articles have a given tag, how many comments they have, and how many times these articles have been viewed.
SELECT R."ID", R."TagName", R."Articles", R."Views"
FROM
(SELECT 'ID' as "ID", 'Tag Name' as "TagName", 'Articles' as "Articles", 'Views' as "Views"
FROM dual
UNION ALL
SELECT to_char(T.tagID), to_char(T.tagName), to_char(NVL(A.articleCount, 0)), to_char(NVL(V.viewcount, 0))
FROM Tags T
   left join (SELECT tagID, count(distinct AT.articleID) as articleCount
               FROM ArticleTags AT join articles A on AT.articleID = A.articleID
               WHERE extract(year from A.publishDate) = :year
               GROUP BY tagID) A on T.tagID = A.tagID
   left join (SELECT tagID, count(*) as viewcount
               FROM ArticleTags AT join ArticleViews AV on AT.articleID = AV.articleID
                  join articles A on AT.articleID = A.articleID
               WHERE extract(year from A.publishDate) = :year
                  and extract(year from AV.viewedAt) = :year
               GROUP BY tagID) V on T.tagID = V.tagID) R
ORDER BY R."Views" DESC;

-- Show how many articles exist for each category, how many comments they have, and how many views the articles have.
SELECT R."catName", R."description", R."articleCount", R."comCount", R."viewCount"
FROM
(SELECT 'Category' as "catName", 'Description' as "description", 'Articles' as "articleCount", 'Comments' as "comCount", 'Views' as "viewCount"
FROM dual
UNION ALL
SELECT distinct C.catName, C.description, to_char(NVL(AC.articleCount, 0)), to_char(NVL(CM.comCount, 0)), to_char(NVL(V.viewCount, 0))
FROM Categories C

   left join (SELECT distinct T1.catName as catName, count(*) as articleCount
               FROM Tags T1 join ArticleTags AT1 on AT1.tagID = T1.tagID
                           join Articles A1 on AT1.articleID = A1.articleID
               WHERE extract(year from A1.publishDate) = :year
               GROUP BY T1.catName) AC on AC.catName = C.catName

   left join (SELECT distinct T2.catName as catName, count(*) as comCount
               FROM Tags T2 join ArticleTags AT2 on AT2.tagID = T2.tagID
                           join Articles A2 on A2.articleID = AT2.articleID
                           join Comments C2 on C2.articleID = AT2.articleID
               WHERE extract(year from A2.publishDate) = :year
               and extract(year from C2.commentDate) = :year
               GROUP BY T2.catName) CM on CM.catName = C.catName

   left join (SELECT distinct T3.catName as catName, count(*) as viewCount
               FROM Tags T3 join ArticleTags AT3 on T3.tagID = AT3.tagID
                           join Articles A3 on A3.articleID = AT3.articleID
                           join ArticleViews V3 on V3.articleID = AT3.articleID
               WHERE extract(year from A3.publishDate) = :year
               and extract(year from V3.viewedAt) = :year
               GROUP BY T3.catName) V on V.catName = C.catName) R
ORDER BY R."viewCount" DESC;

-- Show how many articles each user has viewed, how many comments they've made, and whether they've viewed every article
SELECT R."userID", R."username", R."comCount", R."viewCount", R."vea"
FROM
(SELECT 'ID' as "userID", 'Username' as "username", 'Comments' as "comCount", 'Views' as "viewCount", 'Viewed Every Article?' as "vea"
FROM dual
UNION ALL
SELECT to_char(U.userID), U.username, to_char(NVL(CM.comCount, 0)), to_char(NVL(V.viewCount, 0)), to_char(NVL(D.vea, 'N'))
FROM Users U

   left join (SELECT userID, count(*) as comCount
               FROM Comments
               WHERE extract(year from commentDate) = :year
               GROUP BY userID) CM on CM.userID = U.userID

   left join (SELECT userID, count(*) as viewCount
               FROM ArticleViews
               WHERE extract(year from viewedAt) = :year
               GROUP BY userID) V on V.userID = U.userID

   left join (SELECT U.userID as userID, 'Y' as vea
               FROM Users U
               WHERE not exists (SELECT *
                                 FROM Articles A
                                 WHERE not exists (SELECT *
                                                   FROM ArticleViews AV
                                                   WHERE AV.userID = U.userID
                                                      and AV.articleID = A.articleID))) D
      on D.userID = U.userID) R
ORDER BY R."viewCount" DESC;


-- ######### USER REPORTS #########

-- Get list of tags. Used when a user wants to know what tags there are. They can then view articles that have a given tag.
SELECT R."ID", R."TagName", R."Category", R."ArticleCount"
                FROM
                (SELECT 'ID' as "ID", 'Tag Name' as "TagName", 'Category' as "Category", 'Article Count' as "ArticleCount"
                FROM dual
                UNION ALL
                SELECT to_char(T.tagID), to_char(T.tagName), to_char(T.catName), to_char(NVL(A.articleCount, 0))
                FROM Tags T
                  left join (SELECT tagID, count(*) as articleCount
                             FROM ArticleTags
                             GROUP BY tagID) A on T.tagID = A.tagID) R
                ORDER BY R."ArticleCount" DESC;

-- See list of categories. Used for giving users a list of categories so that they can view articles in a given category.
SELECT R."CategoryName", R."Description", R."ArticleCount"
                     FROM
                     (SELECT 'Category Name' as "CategoryName", 'Description' as "Description", 'Article Count' as "ArticleCount"
                      FROM dual
                      UNION ALL
                      SELECT to_char(C.catName), to_char(C.description), to_char(NVL(A.articleCount, 0))
                      FROM Categories C
                        left join (SELECT T.catName, count(*) as articleCount
                                   FROM Tags T join ArticleTags AT on T.tagID = AT.tagID
                                   GROUP BY T.catName) A on C.catName = A.catName) R
                     ORDER BY R."ArticleCount" DESC;